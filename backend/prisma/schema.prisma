generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@127.0.0.1:3306/db"
}

model User {
  id                                            Int              @id @default(autoincrement())
  username                                      String           @unique
  password                                      String
  display_name                                  String?
  first_name                                    String
  last_name                                     String
  image                                         String?
  status                                        UserStatus
  email                                         String           @unique
  privacy_level                                 UserPrivacyLevel
  role                                          UserRole
  created_at                                    DateTime         @default(now())
  access_tokens                                 AccessToken?
  chat_messages                                 ChatMessage[]
  chat_users                                    ChatUser[]
  chats                                         Chat?
  server_users                                  ServerUser[]
  user_friends_user_friends_recipient_idTousers UserFriend[]     @relation("user_friends_recipient_idTousers")
  user_friends_user_friends_sender_idTousers    UserFriend[]     @relation("user_friends_sender_idTousers")

  @@index([username], map: "user_username")
  @@index([display_name], map: "user_display_name")
  @@index([first_name], map: "user_first_name")
  @@index([last_name], map: "user_last_name")
  @@index([email], map: "user_email")
  @@map("users")
}

model UserFriend {
  id                                     Int              @id @default(autoincrement())
  sender_id                              Int
  recipient_id                           Int
  status                                 UserFriendStatus
  created_at                             DateTime         @db.DateTime(0)
  users_user_friends_recipient_idTousers User             @relation("user_friends_recipient_idTousers", fields: [recipient_id], references: [id], onUpdate: Restrict, map: "friendrequest_receiver")
  users_user_friends_sender_idTousers    User             @relation("user_friends_sender_idTousers", fields: [sender_id], references: [id], onUpdate: Restrict, map: "friendrequest_sender")

  @@index([sender_id], map: "uf_sender_id")
  @@index([recipient_id], map: "uf_recipient_id")
  @@map("user_friends")
}

model Chat {
  id            Int           @id @default(autoincrement())
  name          String?
  created_at    DateTime      @default(now())
  userId        Int?
  chat_messages ChatMessage[]
  chat_users    ChatUser[]
  users         User          @relation(fields: [id], references: [id], onUpdate: Restrict, map: "chat_user_id")

  @@map("chats")
}

model ChatMessage {
  id         Int         @id @default(autoincrement())
  chat_id    Int
  user_id    Int
  type       PayloadType
  payload    String      @db.LongText
  created_at DateTime    @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  chats      Chat?       @relation(fields: [chat_id], references: [id], onUpdate: Restrict, map: "chat_message_chat_id")
  users      User?       @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "chat_message_user_id")

  @@index([chat_id], map: "cm_chat_id")
  @@index([user_id], map: "cm_user_id")
  @@map("chat_messages")
}

model ChatUser {
  id         Int       @id @default(autoincrement())
  chat_id    Int
  user_id    Int
  created_at DateTime  @default(now())
  deleted_at DateTime?
  chats      Chat      @relation(fields: [chat_id], references: [id], onUpdate: Restrict, map: "chat_id")
  users      User      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_id")

  @@index([chat_id], map: "cu_chat_id")
  @@index([user_id], map: "cu_user_id")
  @@map("chat_users")
}

model AccessToken {
  id            Int    @id @default(autoincrement())
  user_id       Int    @unique
  access_token  String
  refresh_token String
  users         User   @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_access_key")

  @@index([user_id], map: "at_user_id")
  @@map("access_tokens")
}

model Server {
  id                                                   Int            @id @default(autoincrement())
  text_channel_id                                      Int?
  name                                                 String
  image                                                String?
  description                                          String
  created_at                                           DateTime       @default(now())
  channel_groups                                       ChannelGroup[]
  server_tags                                          ServerTag[]
  server_users                                         ServerUser[]
  text_channels_servers_text_channel_idTotext_channels TextChannel?   @relation("servers_text_channel_idTotext_channels", fields: [text_channel_id], references: [id], onUpdate: Restrict, map: "server_text_channel_id")
  text_channels                                        TextChannel[]
  voice_channels                                       VoiceChannel[]

  @@index([name], map: "server_name")
  @@index([text_channel_id], map: "server_text_channel_id")
  @@map("servers")
}

model ServerUser {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  server_id          Int
  order              Int
  display_name       String?
  created_at         DateTime             @default(now())
  deleted_at         DateTime?
  role               ServerRole
  ServerUserTag      ServerUserTag[]
  servers            Server               @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "server_users_server_id")
  users              User                 @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "server_users_user_id")
  TextChannelMessage TextChannelMessage[]

  @@index([user_id], map: "su_user_id")
  @@index([server_id], map: "su_server_id")
  @@map("server_users")
}

model ServerTag {
  id               Int             @id @default(autoincrement())
  server_id        Int
  order            Int
  name             String
  color            Color
  servers          Server          @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "server_id_from_tags")
  user_server_tags ServerUserTag[]

  @@index([server_id], map: "st_server_id")
  @@map("server_tags")
}

model ServerUserTag {
  id             Int        @id @default(autoincrement())
  server_tag_id  Int
  server_user_id Int
  server_tag     ServerTag  @relation(fields: [server_tag_id], references: [id], onUpdate: Restrict, map: "server_tag")
  server_user    ServerUser @relation(fields: [server_user_id], references: [id], onUpdate: Restrict, map: "user_servers_id")

  @@index([server_tag_id], map: "sut_server_tag_id")
  @@index([server_user_id], map: "sut_server_user_id")
  @@map("server_user_tags")
}

model ChannelGroup {
  id             Int            @id @default(autoincrement())
  server_id      Int
  order          Int
  name           String
  server         Server         @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "channel_server_id")
  text_channels  TextChannel[]
  voice_channels VoiceChannel[]

  @@index([server_id], map: "cg_server_id")
  @@map("channel_groups")
}

model VoiceChannel {
  id               Int           @id @default(autoincrement())
  server_id        Int
  channel_group_id Int?
  order            Int
  name             String
  max_users        Int?
  channel_group    ChannelGroup? @relation(fields: [channel_group_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "voice_channel_id")
  server           Server        @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "voice_server_id")

  @@index([server_id], map: "vc_server_id")
  @@index([channel_group_id], map: "voice_channel_id")
  @@map("voice_channels")
}

model TextChannel {
  id                                             Int                  @id @default(autoincrement())
  server_id                                      Int
  channel_group_id                               Int?
  order                                          Int
  name                                           String
  topic                                          String
  servers_servers_text_channel_idTotext_channels Server[]             @relation("servers_text_channel_idTotext_channels")
  text_channel_messages                          TextChannelMessage[]
  channel_group                                  ChannelGroup?        @relation(fields: [channel_group_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "text_channel_group")
  server                                         Server               @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "text_server_id")

  @@index([server_id], map: "tc_server_id")
  @@index([channel_group_id], map: "text_channel_group")
  @@map("text_channels")
}

model TextChannelMessage {
  id              Int         @id @default(autoincrement())
  text_channel_id Int
  server_user_id  Int
  type            PayloadType
  payload         String
  created_at      DateTime    @default(now())
  updated_at      DateTime?
  deleted_at      DateTime?
  text_channel    TextChannel @relation(fields: [text_channel_id], references: [id], onUpdate: Restrict, map: "text_channel_id")
  server_user     ServerUser  @relation(fields: [server_user_id], references: [id], onUpdate: Restrict, map: "text_sender_id")

  @@index([text_channel_id], map: "tcm_text_channel_id")
  @@index([server_user_id], map: "tcm_server_user_id")
  @@map("text_channel_messages")
}

enum UserStatus {
  Online
  Away
  DoNotDisturb
  Offline
}

enum UserFriendStatus {
  Pending
  Accepted
}

enum Color {
  Lime
  Green
  Teal
  Blue
  Indigo
  Purple
  Pink
  Red
  Orange
  Yellow
}

enum UserPrivacyLevel {
  Public
  Friends
  SharedServerAndFriends
  Private
}

enum UserRole {
  Administrator
  Default
}

enum ServerRole {
  None
  Moderator
  Administrator
  Owner
}

enum PayloadType {
  Text
  Image
  Video
  Audio
  File
  Deleted
}
