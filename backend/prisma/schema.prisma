generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@127.0.0.1:3306/db"
}

model User {
  id                    Int                     @id @default(autoincrement())
  username              String                  @unique
  password              String
  display_name          String?
  first_name            String
  last_name             String
  image                 String?
  status                UserStatus
  email                 String                  @unique
  privacy_level         UserPrivacyLevel
  role                  UserRole
  created_at            DateTime                @default(now())
  access_token          AccessToken?
  chats                 Chat[]                  @relation("user_chats")
  // not required to track messages from user in any text channel on any server
  //text_channel_messages TextChannelMessage[]
  user_friends          UserFriend[]            @relation("user_friends")
  server_users          ServerUser[]

  @@map("users")
  @@index([username], map: "user_username")
  @@index([display_name], map: "user_display_name")
  @@index([first_name], map: "user_first_name")
  @@index([last_name], map: "user_last_name")
  @@index([email], map: "user_email")
}

model UserFriend {
  id                    Int      @id @default(autoincrement())
  sender_id             Int
  recipient_id          Int
  status                UserFriendStatus
  created_at            DateTime @db.DateTime(0)
  user_friend_sender    User     @relation("friends_user_1", fields: [sender_id], references: [id], onUpdate: Restrict, map: "user_friend_sender")
  user_friend_recipient User     @relation("friends_user_2", fields: [recipient_id], references: [id], onUpdate: Restrict, map: "user_friend_recipient")

  @@map("user_friends")
  @@index([sender_id], map: "uf_sender_id")
  @@index([recipient_id], map: "uf_recipient_id")
}

model Chat {
  id                Int           @id @default(autoincrement())
  name              String?
  created_at        DateTime      @default(now())
  users             User[]        @relation("chat_users")
  messages          ChatMessage[] @relation("chat_messages")

  @@map("chats")
}

model ChatMessage {
  id                Int          @id @default(autoincrement())
  chat_id           Int
  user_id           Int
  type              PayloadType
  payload           String       @db.LongText
  created_at        DateTime     @default(now())
  updated_at        DateTime?
  deleted_at        DateTime?
  chat              Chat         @relation("message_sender", fields: [chat_id], references: [id], map: "sender_id")
  user              User         @relation("message_sender", fields: [user_id], references: [id], map: "sender_id")

  @@map("chat_messages")
  @@index([chat_id], map: "cm_chat_id")
  @@index([user_id], map: "cm_user_id")
}

model ChatUser {
  id                Int          @id @default(autoincrement())
  chat_id           Int
  user_id           Int
  created_at        DateTime     @default(now())
  deleted_at        DateTime?
  chat              Chat         @relation("message_sender", fields: [chat_id], references: [id], map: "sender_id")
  user              User         @relation("message_recipient", fields: [user_id], references: [id], map: "recipient_id")

  @@map("chat_users")
  @@index([chat_id], map: "cu_chat_id")
  @@index([user_id], map: "cu_user_id")
}

model AccessToken {
  id            Int    @id @default(autoincrement())
  user_id       Int    @unique
  access_token  String
  refresh_token String
  user          User  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "access_token")

  @@map("access_tokens")
  @@index([user_id], map: "at_user_id")
}

model Server {
  id              Int              @id @default(autoincrement())
  text_channel_id Int
  name            String
  image           String?
  description     String
  created_at      DateTime         @default(now())
  server_users    ServerUser[]
  server_tags     ServerTag[]
  channel_groups  ChannelGroup[]
  text_channels   TextChannel[]
  voice_channels  VoiceChannel[]

  @@map("servers")
  @@index([name], map: "server_name")
}

model ServerUser {
  id               Int                @id @default(autoincrement())
  user_id          Int
  server_id        Int
  order            Int
  display_name     String?
  created_at       DateTime           @default(now())
  deleted_at       DateTime?
  role             ServerRole
  server_tag_users ServerUserTag[]
  server           Server             @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "server_id")
  user             User               @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_id")

  @@map("server_users")
  @@index([user_id], map: "su_user_id")
  @@index([server_id], map: "su_server_id")
}

model ServerTag {
  id               Int                @id @default(autoincrement())
  server_id        Int
  order            Int
  name             String
  color            Color
  servers          Server             @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "server_id_from_tags")
  user_server_tags ServerUserTag[]

  @@map("server_tags")
  @@index([server_id], map: "st_server_id")
}

model ServerUserTag {
  id             Int           @id @default(autoincrement())
  server_tag_id  Int
  server_user_id Int
  server_tag     ServerTag     @relation(fields: [server_tag_id], references: [id], onUpdate: Restrict, map: "server_tag")
  server_user    ServerUser    @relation(fields: [server_user_id], references: [id], onUpdate: Restrict, map: "user_servers_id")

  @@map("server_user_tags")
  @@index([server_tag_id], map: "sut_server_tag_id")
  @@index([server_user_id], map: "sut_server_user_id")
}

model ChannelGroup {
  id             Int             @id @default(autoincrement())
  server_id      Int
  order          Int
  name           String
  server         Server          @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "channel_server_id")
  text_channels  TextChannel[]
  voice_channels VoiceChannel[]

  @@map("channel_groups")
  @@index([server_id], map: "cg_server_id")
}

model VoiceChannel {
  id               Int             @id @default(autoincrement())
  server_id        Int
  channel_group_id Int?
  order            Int
  name             String
  max_users        Int?
  channel_group    ChannelGroup?   @relation(fields: [channel_group_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "voice_channel_id")
  server           Server          @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "voice_server_id")

  @@map("voice_channels")
  @@index([server_id], map: "vc_server_id")
}

model TextChannel {
  id                    Int                     @id @default(autoincrement())
  server_id             Int
  channel_group_id      Int?
  order                 Int
  name                  String
  topic                 String
  text_channel_messages TextChannelMessage[]
  channel_group         ChannelGroup?           @relation(fields: [channel_group_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "text_channel_group")
  server                Server                  @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "text_server_id")

  @@map("text_channels")
  @@index([server_id], map: "tc_server_id")
}

model TextChannelMessage {
  id              Int           @id @default(autoincrement())
  text_channel_id Int
  server_user_id  Int
  type            PayloadType
  payload         String
  created_at      DateTime      @default(now())
  updated_at      DateTime?
  deleted_at      DateTime?
  text_channel    TextChannel   @relation(fields: [text_channel_id], references: [id], onUpdate: Restrict, map: "text_channel_id")
  server_user     ServerUser    @relation(fields: [server_user_id], references: [id], onUpdate: Restrict, map: "text_sender_id")

  @@map("text_channel_messages")
  @@index([text_channel_id], map: "tcm_text_channel_id")
  @@index([server_user_id], map: "tcm_server_user_id")
}

enum UserStatus {
  Online
  Away
  DoNotDisturb
  Offline
}

enum UserFriendStatus {
  Pending
  Accepted
}

enum Color {
  Lime
  Green
  Teal
  Blue
  Indigo
  Purple
  Pink
  Red
  Orange
  Yellow
}

enum UserPrivacyLevel {
  Public
  Friends
  SharedServerAndFriends
  Private
}

enum UserRole {
  Administrator
  Default
}

enum ServerRole {
  None
  Moderator
  Administrator
  Owner
}

enum PayloadType {
  Text
  Image
  Video
  Audio
  File
  //Deleted
}
