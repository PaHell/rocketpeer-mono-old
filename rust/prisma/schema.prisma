generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

datasource db {
  provider = "mysql"
  url      = env("RUST_DB_URL")
}

model users {
  id                    Int                     @id @default(autoincrement())
  user_name             String                  @unique
  password              String
  display_name          String?
  first_name            String
  last_name             String
  image                 Bytes                   @db.Blob
  status                users_status
  email                 String                  @unique
  privacy_level         users_privacy_level
  role                  users_role
  created_at            DateTime                @default(now())
  access_token          access_token?
  message_receiver      message[]               @relation("message_receiver")
  message_sender        message[]               @relation("message_sender")
  text_channel_messages text_channel_messages[]
  friends_user_1        user_friends[]          @relation("friends_user_1")
  friends_user_2        user_friends[]          @relation("friends_user_2")
  users_servers         users_servers[]
}

model user_friends {
  id             Int      @id @default(autoincrement())
  user_1_id      Int
  user_2_id      Int
  created_at     DateTime @db.DateTime(0)
  friends_user_1 users    @relation("friends_user_1", fields: [user_1_id], references: [id], onUpdate: Restrict, map: "user_1")
  friends_user_2 users    @relation("friends_user_2", fields: [user_2_id], references: [id], onUpdate: Restrict, map: "user_2")

  @@index([user_1_id], map: "user_1")
  @@index([user_2_id], map: "user_2")
}

model message {
  id               Int          @id @default(autoincrement())
  sender_id        Int
  receiver_id      Int
  type             message_type
  payload          String       @db.LongText
  created_at       DateTime     @default(now())
  deleted_at       DateTime
  message_receiver users        @relation("message_receiver", fields: [receiver_id], references: [id], map: "receiver_id")
  message_sender   users        @relation("message_sender", fields: [sender_id], references: [id], map: "sender_id")

  @@index([receiver_id], map: "receiver_id")
  @@index([sender_id], map: "sender_id")
}

model access_token {
  id            Int    @id @default(autoincrement())
  user_id       Int    @unique
  access_token  String
  refresh_token String
  users         users  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "access_token")
}

model users_servers {
  id               Int                @id @default(autoincrement())
  user_id          Int
  server_id        Int
  display_name     String
  role             server_role
  user_server_tags user_server_tags[]
  servers          servers            @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "server_id")
  users            users              @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_id")

  @@index([server_id], map: "server_id")
  @@index([user_id], map: "user_id")
}

model servers {
  id              Int              @id @default(autoincrement())
  name            String
  text_channel_id Int
  description     String
  channel_groups  channel_groups[]
  server_tags     server_tags[]
  text_channels   text_channels[]
  users_servers   users_servers[]
  voice_channel   voice_channel[]
}

model server_tags {
  id               Int                @id @default(autoincrement())
  server_id        Int
  order            Int
  name             String
  Color            colors
  servers          servers            @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "server_id_from_tags")
  user_server_tags user_server_tags[]

  @@index([server_id], map: "server_id_from_tags")
}

model user_server_tags {
  id             Int           @id @default(autoincrement())
  server_tag_id  Int
  user_server_id Int
  server_tags    server_tags   @relation(fields: [server_tag_id], references: [id], onUpdate: Restrict, map: "server_tag")
  users_servers  users_servers @relation(fields: [user_server_id], references: [id], onUpdate: Restrict, map: "user_servers_id")

  @@index([server_tag_id], map: "server_tag")
  @@index([user_server_id], map: "user_servers_id")
}

model channel_groups {
  id            Int             @id @default(autoincrement())
  server_id     Int
  order         Int
  name          String
  servers       servers         @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "channel_server_id")
  text_channels text_channels[]
  voice_channel voice_channel[]

  @@index([server_id], map: "channel_server_id")
}

model voice_channel {
  id               Int             @id @default(autoincrement())
  server_id        Int
  channel_group_id Int?
  order            Int
  name             String
  max_users        Int
  channel_groups   channel_groups? @relation(fields: [channel_group_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "voice_channel_id")
  servers          servers         @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "voice_server_id")

  @@index([channel_group_id], map: "voice_channel_id")
  @@index([server_id], map: "voice_server_id")
}

model text_channels {
  id                    Int                     @id @default(autoincrement())
  server_id             Int
  channel_group_id      Int?
  order                 Int
  name                  String
  topic                 String
  text_channel_messages text_channel_messages[]
  channel_groups        channel_groups?         @relation(fields: [channel_group_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "text_channel_group")
  servers               servers                 @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "text_server_id")

  @@index([channel_group_id], map: "text_channel_group")
  @@index([server_id], map: "text_server_id")
}

model text_channel_messages {
  id              Int           @id @default(autoincrement())
  sender_id       Int
  text_channel_id Int
  type            message_type
  payload         String
  created_at      DateTime      @default(now())
  deleted_at      DateTime
  text_channels   text_channels @relation(fields: [text_channel_id], references: [id], onUpdate: Restrict, map: "text_channel_id")
  users           users         @relation(fields: [sender_id], references: [id], onUpdate: Restrict, map: "text_sender_id")

  @@index([text_channel_id], map: "text_channel_id")
  @@index([sender_id], map: "text_sender_id")
}

enum users_status {
  online
  away
  do_not_disturb
  offline
}

enum colors {
  black
  white
  purple
}

enum users_privacy_level {
  default
}

enum users_role {
  administrator
  default
}

enum server_role {
  administrator
  default
}

enum message_type {
  text
  picture
  video
  gif
}
